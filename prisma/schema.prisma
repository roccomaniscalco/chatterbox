generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  messages               Message[]
  channels               Channel[]
  adminChannels          Channel[]       @relation(name: "adminToChannels")
  friendshipsAs1         Friendship[]    @relation(name: "friendshipsAs1")
  friendshipsAs2         Friendship[]    @relation(name: "friendshipsAs2")
  friendRequestsSent     FriendRequest[] @relation(name: "friendRequestsSent")
  friendRequestsReceived FriendRequest[] @relation(name: "friendRequestsReceived")
}

model Friendship {
  id        String   @id @default(cuid())
  user1     User     @relation(name: "friendshipsAs1", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id   String
  user2     User     @relation(name: "friendshipsAs2", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id   String
  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
}

model FriendRequest {
  id         String   @id @default(cuid())
  sender     User     @relation(name: "friendRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation(name: "friendRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Channel {
  id          String    @id @default(cuid())
  adminId     String
  slug        String    @unique
  name        String
  description String?
  image       String?   @db.Text
  createdAt   DateTime  @default(now())
  messages    Message[]
  users       User[]
  admin       User      @relation(name: "adminToChannels", fields: [adminId], references: [id])

  @@index([slug])
}

model Message {
  id        Int      @id @default(autoincrement())
  userId    String
  channelId String
  content   String
  sentAt    DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
}
